<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.optimaize.soapworks.exampleproject</groupId>
        <artifactId>soapworks-exampleproject</artifactId>
        <version>0.5-SNAPSHOT</version>
    </parent>

    <groupId>com.optimaize.soapworks.exampleproject.clientlib</groupId>
    <artifactId>soapworks-exampleproject-clientlib</artifactId>
    <name>soapworks-exampleproject-clientlib</name>

    <description>
        The matching web service client library for the server in this example project
        to connect to the server.

        This library is ideally provided by the service provider of the server, so that
        users can go ahead and hack their userland code against this client library,
        without having to worry about the transport.

        Whether the client library uses REST or SOAP is up to the implementor, both are
        possible. A user of the client library usually does not care what technology
        is used underneath (as long as things are working correctly).
    </description>

    <properties>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.optimaize.soapworks.exampleproject.ontology</groupId>
            <artifactId>soapworks-exampleproject-ontology</artifactId>
            <version>0.5-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>com.optimaize.soapworks.client</groupId>
            <artifactId>soapworks-client</artifactId>
            <version>0.5-SNAPSHOT</version>
        </dependency>
    </dependencies>
</project>
